{"version":3,"sources":["components/Algorithm.module.scss","containers/App.module.scss","components/Sample.tsx","logic/utils.ts","logic/algos.ts","components/Algorithm.tsx","containers/App.tsx","reportWebVitals.ts","index.tsx","components/Sample.module.scss"],"names":["module","exports","Sample","active","color","value","max","className","classnames","getColorStyle","Styles","activeSample","style","height","sampleText","c","secondary","complementary","primary","delay","t","Promise","r","setTimeout","mergeSortedArray","left","right","leftIndex","rightIndex","result","li","ri","length","push","swapPart","list","startIndex","values","forEach","v","i","buildRange","from","to","INTERVAL","visualMergeSort","setList","setCurrent","a","mergeSort","sorted","Set","original","endIndex","mid","Math","floor","slice","ori","ori2","modified","Algorithm","algo","useState","currentSet","setCurrentSet","algorithmTrigger","useCallback","sampleList","useMemo","map","val","has","useEffect","then","console","log","algorithm","sampleHolder","Array","random","App","app","array","sort","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c1ff6b0e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"algorithm\":\"Algorithm_algorithm__2veTm\",\"sampleHolder\":\"Algorithm_sampleHolder__1Rlzi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__1v308\"};","import React from 'react';\nimport classnames from 'classnames';\nimport Styles from './Sample.module.scss';\ntype ColorType = 'primary' | 'secondary' | 'complementary';\n\ninterface SampleProps {\n  active?: boolean;\n  color: ColorType;\n  value: number;\n  max: number;\n}\n\nexport const Sample: React.FC<SampleProps> = ({\n  active,\n  color,\n  value,\n  max,\n}) => {\n  return (\n    <div\n      className={classnames(getColorStyle(color), {\n        [Styles.activeSample]: active,\n      })}\n      style={{\n        height: `${(100 * value) / max}%`,\n      }}\n    >\n      <span className={Styles.sampleText}>{value}</span>\n    </div>\n  );\n};\n\nconst getColorStyle = (c: ColorType) => {\n  switch (c) {\n    case 'secondary':\n      return Styles.secondary;\n    case 'complementary':\n      return Styles.complementary;\n    case 'primary':\n    default:\n      return Styles.primary;\n  }\n};\n","export const shuffleArray = (array: any[]) => {\n  return array.sort(() => (Math.random() > 0.5 ? 1 : -1));\n};\n\nexport const delay = (t: number) => new Promise((r) => setTimeout(r, t));\n\nexport const swap = (base: number, target: number, source: number[]) => {\n  [source[base], source[target]] = [source[target], source[base]];\n};\n\nexport const mergeSortedArray = (\n  left: number[],\n  right: number[],\n  leftIndex: number,\n  rightIndex: number\n) => {\n  const result: number[] = [];\n  let li = 0;\n  let ri = 0;\n\n  while (li < left.length && ri < right.length) {\n    if (left[li] < right[ri]) {\n      result.push(left[li]);\n      li++;\n    } else {\n      result.push(right[ri]);\n      ri++;\n    }\n  }\n\n  while (li < left.length) {\n    result.push(left[li]);\n    li++;\n  }\n\n  while (ri < right.length) {\n    result.push(right[ri]);\n    ri++;\n  }\n\n  return result;\n};\n\nexport const swapPart = (\n  list: number[],\n  startIndex: number,\n  values: number[]\n): number[] => {\n  const result = [...list];\n\n  values.forEach((v, i) => {\n    result[startIndex + i] = v;\n  });\n\n  return result;\n};\n\nexport const buildRange = (from: number, to: number): number[] => {\n  const result = [];\n\n  for (let i = from; i <= to; i++) {\n    result.push(i);\n  }\n\n  return result;\n};\n","import { buildRange, delay, mergeSortedArray, swap, swapPart } from './utils';\n\nconst INTERVAL = 100;\n\nexport const visualBubbleSort = async (\n  list: number[],\n  setList: (l: number[]) => void,\n  setCurrent: (s: Set<number>) => void\n): Promise<void> => {\n  const result = [...list];\n  const size = result.length;\n\n  for (let i = 0; i < size - 1; i++) {\n    for (let j = 0; j < size - i - 1; j++) {\n      setCurrent(new Set([j, j + 1]));\n      await delay(INTERVAL);\n      if (result[j] > result[j + 1]) {\n        swap(j, j + 1, result);\n        setList([...result]);\n        await delay(INTERVAL);\n      }\n    }\n  }\n\n  setCurrent(new Set());\n};\n\nexport const visualMergeSort = async (\n  list: number[],\n  setList: (l: number[]) => void,\n  setCurrent: (s: Set<number>) => void\n): Promise<void> => {\n  const [sorted] = await mergeSort(\n    list,\n    [...list],\n    setList,\n    setCurrent,\n    0,\n    list.length - 1\n  );\n  setList(sorted);\n  setCurrent(new Set());\n};\n\nexport const mergeSort = async (\n  list: number[],\n  original: number[],\n  setList: (l: number[]) => void,\n  setCurrent: (s: Set<number>) => void,\n  startIndex: number,\n  endIndex: number\n): Promise<[number[], number[]]> => {\n  if (list.length <= 1) {\n    return [list, original];\n  }\n\n  const mid = Math.floor(list.length / 2);\n\n  const [left, ori] = await mergeSort(\n    list.slice(0, mid),\n    original,\n    setList,\n    setCurrent,\n    startIndex,\n    mid\n  );\n\n  const [right, ori2] = await mergeSort(\n    list.slice(mid),\n    ori,\n    setList,\n    setCurrent,\n    startIndex + mid,\n    startIndex + endIndex\n  );\n\n  setCurrent(new Set(buildRange(startIndex, endIndex)));\n  await delay(INTERVAL);\n\n  const sorted = mergeSortedArray(left, right, startIndex, endIndex);\n\n  const modified = swapPart(ori2, startIndex, sorted);\n  setList(modified);\n  await delay(INTERVAL);\n\n  return [sorted, modified];\n};\n","import React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { Sample } from './Sample';\n\nimport Styles from './Algorithm.module.scss';\nimport { mergeSort, visualBubbleSort, visualMergeSort } from '../logic/algos';\n\ninterface ScreenProps {\n  values: number[];\n  algo: string;\n}\n\nexport const Algorithm: React.FC<ScreenProps> = ({ values, algo }) => {\n  const [list, setList] = useState<number[]>(values);\n  const [currentSet, setCurrentSet] = useState<Set<number>>(new Set());\n  const max = Math.max(...values);\n  const algorithmTrigger = useCallback(\n    // () => visualBubbleSort(values, setList, setCurrentSet),\n    () => visualMergeSort(values, setList, setCurrentSet),\n    [values]\n  );\n\n  const sampleList = useMemo(\n    () =>\n      list.map((val, i) => (\n        <Sample\n          key={`${algo}:${i}:${val}`}\n          color=\"primary\"\n          value={val}\n          max={max}\n          active={currentSet.has(i)}\n        />\n      )),\n    [currentSet, algo, list, max]\n  );\n\n  useEffect(() => {\n    algorithmTrigger().then(() => console.log('Finished Sorting ðŸŒˆ'));\n  }, [algorithmTrigger]);\n\n  return (\n    <div className={Styles.algorithm}>\n      <div className={Styles.sampleHolder}>{sampleList}</div>\n    </div>\n  );\n};\n","import React from 'react';\n\nimport Styles from './App.module.scss';\nimport { Algorithm } from '../components/Algorithm';\nimport { shuffleArray } from '../logic/utils';\n\nconst sampleList = Array.from(\n  { length: 75 },\n  () => Math.floor(Math.random() * 70) + 1\n);\n\nconst App: React.FC = () => {\n  return (\n    <div className={Styles.app}>\n      <Algorithm algo=\"bubble\" values={shuffleArray(sampleList)} />\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sample\":\"Sample_sample__2TIu5\",\"primary\":\"Sample_primary__2Tn8B\",\"secondary\":\"Sample_secondary__3jm0-\",\"complementary\":\"Sample_complementary__1keqn\",\"activeSample\":\"Sample_activeSample__1lEq1\",\"sampleText\":\"Sample_sampleText__eLQlu\"};"],"sourceRoot":""}