{"version":3,"sources":["containers/App.module.scss","components/Sample.module.scss","components/Sample.tsx","logic/utils.ts","logic/algos.ts","components/Screen.tsx","containers/App.tsx","reportWebVitals.ts","index.tsx","components/Screen.module.scss"],"names":["module","exports","Sample","active","color","value","max","className","classnames","getColorStyle","Styles","activeSample","style","height","sampleText","c","secondary","complementary","primary","delay","t","Promise","r","setTimeout","swap","base","target","source","visualBubbleSort","list","setList","setCurrent","a","result","size","length","i","j","Set","Screen","values","algo","useState","didInit","setInit","activeIndexes","setActiveIndexes","useMemo","Math","sampleList","map","val","has","useEffect","screen","sampleHolder","Array","from","floor","random","App","app","array","sort","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.06d0b261.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__1v308\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sample\":\"Sample_sample__2TIu5\",\"primary\":\"Sample_primary__2Tn8B\",\"secondary\":\"Sample_secondary__3jm0-\",\"complementary\":\"Sample_complementary__1keqn\",\"activeSample\":\"Sample_activeSample__1lEq1\",\"sampleText\":\"Sample_sampleText__eLQlu\"};","import React from 'react';\nimport classnames from 'classnames';\nimport Styles from './Sample.module.scss';\ntype ColorType = 'primary' | 'secondary' | 'complementary';\n\ninterface SampleProps {\n  active?: boolean;\n  color: ColorType;\n  value: number;\n  max: number;\n}\n\nexport const Sample: React.FC<SampleProps> = ({\n  active,\n  color,\n  value,\n  max,\n}) => {\n  return (\n    <div\n      className={classnames(getColorStyle(color), {\n        [Styles.activeSample]: active,\n      })}\n      style={{\n        height: `${(100 * value) / max}%`,\n      }}\n    >\n      <span className={Styles.sampleText}>{value}</span>\n    </div>\n  );\n};\n\nconst getColorStyle = (c: ColorType) => {\n  switch (c) {\n    case 'secondary':\n      return Styles.secondary;\n    case 'complementary':\n      return Styles.complementary;\n    case 'primary':\n    default:\n      return Styles.primary;\n  }\n};\n","export const shuffleArray = (array: any[]) => {\n  return array.sort(() => (Math.random() > 0.5 ? 1 : -1));\n};\n\nexport const delay = (t: number) => new Promise((r) => setTimeout(r, t));\n\nexport const swap = (base: number, target: number, source: number[]) => {\n  [source[base], source[target]] = [source[target], source[base]];\n};\n","import { delay, swap } from './utils';\n\nconst INTERVAL = 40;\n\nexport const visualBubbleSort = async (\n  list: number[],\n  setList: (l: number[]) => void,\n  setCurrent: (s: Set<number>) => void\n): Promise<void> => {\n  const result = [...list];\n  const size = result.length;\n\n  for (let i = 0; i < size - 1; i++) {\n    for (let j = 0; j < size - i - 1; j++) {\n      setCurrent(new Set([j, j + 1]));\n      await delay(INTERVAL);\n      if (result[j] > result[j + 1]) {\n        swap(j, j + 1, result);\n        setList([...result]);\n        await delay(INTERVAL);\n      }\n    }\n  }\n\n  setCurrent(new Set());\n};\n","import React, { useEffect, useMemo, useState } from 'react';\nimport classNames from 'classnames';\nimport { Sample } from './Sample';\n\nimport Styles from './Screen.module.scss';\nimport { visualBubbleSort } from '../logic/algos';\n\ninterface ScreenProps {\n  values: number[];\n  algo: string;\n}\n\nexport const Screen: React.FC<ScreenProps> = ({ values, algo }) => {\n  const [didInit, setInit] = useState<boolean>(false);\n  const [list, setList] = useState<number[]>(values);\n  const [activeIndexes, setActiveIndexes] = useState<Set<number>>(new Set());\n  const max = useMemo(() => Math.max(...list), [list]);\n\n  const sampleList = useMemo(\n    () =>\n      list.map((val, i) => (\n        <Sample\n          key={`${algo}:${i}:${val}`}\n          color=\"primary\"\n          value={val}\n          max={max}\n          active={activeIndexes.has(i)}\n        />\n      )),\n    [activeIndexes, algo, list, max]\n  );\n\n  useEffect(() => {\n    if (!didInit) {\n      setInit(true);\n      visualBubbleSort(list, setList, setActiveIndexes);\n    }\n  }, [didInit, list]);\n\n  return (\n    <div className={Styles.screen}>\n      <div className={Styles.sampleHolder}>{sampleList}</div>\n    </div>\n  );\n};\n","import React from 'react';\n\nimport Styles from './App.module.scss';\nimport { Screen } from '../components/Screen';\nimport { shuffleArray } from '../logic/utils';\n\nconst sampleList = Array.from(\n  { length: 50 },\n  () => Math.floor(Math.random() * 70) + 1\n);\n\nconst App: React.FC = () => {\n  return (\n    <div className={Styles.app}>\n      <Screen algo=\"bubble\" values={shuffleArray(sampleList)} />\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"screen\":\"Screen_screen__vCAjz\",\"sampleHolder\":\"Screen_sampleHolder__3FV6m\"};"],"sourceRoot":""}