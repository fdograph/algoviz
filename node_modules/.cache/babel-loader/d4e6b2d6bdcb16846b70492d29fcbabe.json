{"ast":null,"code":"import { arrayToMap, checkKillSwitch, enableKillSwitch, onSortStep, resetKillSwitch, splitMap, updateSortedMap } from \"./utils\";\nexport const mergeSortMaps = (left, right) => {\n  const result = [];\n  const leftValues = [...left.values()];\n  const rightValues = [...right.values()];\n  let lidx = 0;\n  let ridx = 0;\n\n  while (lidx < leftValues.length && ridx < rightValues.length) {\n    const levalue = leftValues[lidx];\n    const revalue = rightValues[ridx];\n\n    if (levalue < revalue) {\n      result.push(levalue);\n      lidx++;\n    } else {\n      result.push(revalue);\n      ridx++;\n    }\n  }\n\n  while (lidx < leftValues.length) {\n    const levalue = leftValues[lidx];\n    result.push(levalue);\n    lidx++;\n  }\n\n  while (ridx < rightValues.length) {\n    const revalue = rightValues[ridx];\n    result.push(revalue);\n    ridx++;\n  }\n\n  return result;\n};\nexport const mergeSort = async (list, onSortStep) => {\n  checkKillSwitch();\n  await onSortStep(list);\n\n  if (list.size <= 1) {\n    return list;\n  }\n\n  const parts = splitMap(list);\n  const left = await mergeSort(parts.left, onSortStep);\n  await onSortStep(left);\n  const right = await mergeSort(parts.right, onSortStep);\n  await onSortStep(right);\n  const sortedParts = mergeSortMaps(left, right);\n  const sortedMap = updateSortedMap(list, sortedParts);\n  await onSortStep(sortedMap);\n  return sortedMap;\n};\nexport const mergeSortAlgoFn = (originalList, setRenderList, setSelectedIdxs) => ({\n  play: async interval => {\n    resetKillSwitch();\n    const sortedMap = await mergeSort(arrayToMap(originalList), onSortStep(originalList, setRenderList, setSelectedIdxs, interval));\n    setSelectedIdxs(new Set());\n    return [...sortedMap.values()];\n  },\n  pause: () => enableKillSwitch()\n});","map":{"version":3,"sources":["/Users/fernandosilva/projects/algoviz/src/logic/mergeSort.ts"],"names":["arrayToMap","checkKillSwitch","enableKillSwitch","onSortStep","resetKillSwitch","splitMap","updateSortedMap","mergeSortMaps","left","right","result","leftValues","values","rightValues","lidx","ridx","length","levalue","revalue","push","mergeSort","list","size","parts","sortedParts","sortedMap","mergeSortAlgoFn","originalList","setRenderList","setSelectedIdxs","play","interval","Set","pause"],"mappings":"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","sourcesContent":["import {\n  arrayToMap,\n  checkKillSwitch,\n  enableKillSwitch,\n  onSortStep,\n  resetKillSwitch,\n  splitMap,\n  updateSortedMap,\n  VisualAlgoFn,\n} from \"./utils\";\nimport type { BaseAlgoFn } from \"./utils\";\n\nexport const mergeSortMaps = (\n  left: Map<number, number>,\n  right: Map<number, number>\n): number[] => {\n  const result: number[] = [];\n  const leftValues = [...left.values()];\n  const rightValues = [...right.values()];\n  let lidx = 0;\n  let ridx = 0;\n\n  while (lidx < leftValues.length && ridx < rightValues.length) {\n    const levalue = leftValues[lidx];\n    const revalue = rightValues[ridx];\n\n    if (levalue < revalue) {\n      result.push(levalue);\n      lidx++;\n    } else {\n      result.push(revalue);\n      ridx++;\n    }\n  }\n\n  while (lidx < leftValues.length) {\n    const levalue = leftValues[lidx];\n    result.push(levalue);\n    lidx++;\n  }\n\n  while (ridx < rightValues.length) {\n    const revalue = rightValues[ridx];\n    result.push(revalue);\n    ridx++;\n  }\n\n  return result;\n};\n\nexport const mergeSort: BaseAlgoFn = async (\n  list: Map<number, number>,\n  onSortStep: (list: Map<number, number>) => Promise<void>\n): Promise<Map<number, number>> => {\n  checkKillSwitch();\n\n  await onSortStep(list);\n\n  if (list.size <= 1) {\n    return list;\n  }\n\n  const parts = splitMap(list);\n  const left = await mergeSort(parts.left, onSortStep);\n  await onSortStep(left);\n\n  const right = await mergeSort(parts.right, onSortStep);\n  await onSortStep(right);\n\n  const sortedParts = mergeSortMaps(left, right);\n  const sortedMap = updateSortedMap(list, sortedParts);\n  await onSortStep(sortedMap);\n\n  return sortedMap;\n};\n\nexport const mergeSortAlgoFn: VisualAlgoFn = (\n  originalList: number[],\n  setRenderList: (l: number[]) => void,\n  setSelectedIdxs: (idxs: Set<number>) => void\n) => ({\n  play: async (interval: number) => {\n    resetKillSwitch();\n\n    const sortedMap = await mergeSort(\n      arrayToMap(originalList),\n      onSortStep(originalList, setRenderList, setSelectedIdxs, interval)\n    );\n\n    setSelectedIdxs(new Set<number>());\n\n    return [...sortedMap.values()];\n  },\n  pause: () => enableKillSwitch(),\n});\n"]},"metadata":{},"sourceType":"module"}