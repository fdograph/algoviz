{"ast":null,"code":"var _jsxFileName = \"/Users/fernandosilva/projects/algoviz/src/components/SortingAlgos/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { buildRandomList } from \"../../logic/utils\";\nimport Styles from \"./SortingAlgos.module.css\";\nimport { AlgoType, getAlgo } from \"../../logic/algorithms\";\nimport { Algorithm } from \"../Algorithm\";\nimport { AlgoTypeSelector } from \"./AlgoTypeSelector\";\nimport classNames from \"classnames\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst responsiveListSize = () => {// const width = ;\n};\n\nconst SortingAlgos = () => {\n  _s();\n\n  const [algoType, setAlgoType] = useState(AlgoType.BUBBLE_SORT);\n  const [initialList] = useState(buildRandomList(150));\n  const [min, max] = [Math.min(...initialList), Math.max(...initialList)];\n  const [renderList, setRenderList] = useState(initialList);\n  const [selectedIdxs, setSelectedIdxs] = useState(new Set());\n  const [isPLaying, setIsPlaying] = useState(false);\n  const algo = useMemo(() => getAlgo(algoType, initialList, setRenderList, setSelectedIdxs), [algoType, initialList]);\n  const playPause = useCallback(() => {\n    if (isPLaying) {\n      algo.pause();\n      setIsPlaying(false);\n    } else {\n      algo.play(30).then(sorted => {\n        algo.pause();\n        setIsPlaying(false);\n        setRenderList(sorted);\n      });\n      setIsPlaying(true);\n    }\n  }, [algo, isPLaying]);\n  useEffect(() => {\n    return () => {\n      setIsPlaying(false);\n      algo.pause();\n    };\n  }, [algo]);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: Styles.AlgorithmsWrapper,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: Styles.AlgorithmsControls,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: Styles.AlgorithmsControlField,\n        children: /*#__PURE__*/_jsxDEV(AlgoTypeSelector, {\n          selectedType: algoType,\n          onChange: t => setAlgoType(t)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: Styles.AlgorithmsControlField,\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: classNames(Styles.AlgorithmsControlBtn, {\n            [Styles.isPlaying]: isPLaying\n          }),\n          onClick: playPause,\n          children: isPLaying ? \"Stop\" : \"Start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(Algorithm, {\n        renderList: renderList,\n        selected: selectedIdxs,\n        max: max,\n        min: min\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SortingAlgos, \"Gf8oqEN06hw1Z5pKRSx7iHiCQTM=\");\n\n_c = SortingAlgos;\nexport default SortingAlgos;\n\nvar _c;\n\n$RefreshReg$(_c, \"SortingAlgos\");","map":{"version":3,"sources":["/Users/fernandosilva/projects/algoviz/src/components/SortingAlgos/index.tsx"],"names":["React","useCallback","useEffect","useMemo","useState","buildRandomList","Styles","AlgoType","getAlgo","Algorithm","AlgoTypeSelector","classNames","responsiveListSize","SortingAlgos","algoType","setAlgoType","BUBBLE_SORT","initialList","min","max","Math","renderList","setRenderList","selectedIdxs","setSelectedIdxs","Set","isPLaying","setIsPlaying","algo","playPause","pause","play","then","sorted","AlgorithmsWrapper","AlgorithmsControls","AlgorithmsControlField","t","AlgorithmsControlBtn","isPlaying"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,OAAxC,EAAiDC,QAAjD,QAAiE,OAAjE;AACA,SAASC,eAAT,QAAgC,mBAAhC;AAEA,OAAOC,MAAP,MAAmB,2BAAnB;AACA,SAASC,QAAT,EAAmBC,OAAnB,QAAkC,wBAAlC;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,OAAOC,UAAP,MAAuB,YAAvB;;;AAEA,MAAMC,kBAAkB,GAAG,MAAM,CAC/B;AACD,CAFD;;AAIA,MAAMC,YAAsB,GAAG,MAAM;AAAA;;AACnC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAWG,QAAQ,CAACS,WAApB,CAAxC;AACA,QAAM,CAACC,WAAD,IAAgBb,QAAQ,CAACC,eAAe,CAAC,GAAD,CAAhB,CAA9B;AACA,QAAM,CAACa,GAAD,EAAMC,GAAN,IAAa,CAACC,IAAI,CAACF,GAAL,CAAS,GAAGD,WAAZ,CAAD,EAA2BG,IAAI,CAACD,GAAL,CAAS,GAAGF,WAAZ,CAA3B,CAAnB;AACA,QAAM,CAACI,UAAD,EAAaC,aAAb,IAA8BlB,QAAQ,CAAWa,WAAX,CAA5C;AACA,QAAM,CAACM,YAAD,EAAeC,eAAf,IAAkCpB,QAAQ,CAAc,IAAIqB,GAAJ,EAAd,CAAhD;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BvB,QAAQ,CAAU,KAAV,CAA1C;AACA,QAAMwB,IAAI,GAAGzB,OAAO,CAClB,MAAMK,OAAO,CAACM,QAAD,EAAWG,WAAX,EAAwBK,aAAxB,EAAuCE,eAAvC,CADK,EAElB,CAACV,QAAD,EAAWG,WAAX,CAFkB,CAApB;AAKA,QAAMY,SAAS,GAAG5B,WAAW,CAAC,MAAM;AAClC,QAAIyB,SAAJ,EAAe;AACbE,MAAAA,IAAI,CAACE,KAAL;AACAH,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAHD,MAGO;AACLC,MAAAA,IAAI,CAACG,IAAL,CAAU,EAAV,EAAcC,IAAd,CAAoBC,MAAD,IAAY;AAC7BL,QAAAA,IAAI,CAACE,KAAL;AACAH,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACAL,QAAAA,aAAa,CAACW,MAAD,CAAb;AACD,OAJD;AAKAN,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;AACF,GAZ4B,EAY1B,CAACC,IAAD,EAAOF,SAAP,CAZ0B,CAA7B;AAcAxB,EAAAA,SAAS,CAAC,MAAM;AACd,WAAO,MAAM;AACXyB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAC,MAAAA,IAAI,CAACE,KAAL;AACD,KAHD;AAID,GALQ,EAKN,CAACF,IAAD,CALM,CAAT;AAOA,sBACE;AAAS,IAAA,SAAS,EAAEtB,MAAM,CAAC4B,iBAA3B;AAAA,4BACE;AAAK,MAAA,SAAS,EAAE5B,MAAM,CAAC6B,kBAAvB;AAAA,8BACE;AAAK,QAAA,SAAS,EAAE7B,MAAM,CAAC8B,sBAAvB;AAAA,+BACE,QAAC,gBAAD;AACE,UAAA,YAAY,EAAEtB,QADhB;AAEE,UAAA,QAAQ,EAAGuB,CAAD,IAAOtB,WAAW,CAACsB,CAAD;AAF9B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAOE;AAAK,QAAA,SAAS,EAAE/B,MAAM,CAAC8B,sBAAvB;AAAA,+BACE;AACE,UAAA,SAAS,EAAEzB,UAAU,CAACL,MAAM,CAACgC,oBAAR,EAA8B;AACjD,aAAChC,MAAM,CAACiC,SAAR,GAAoBb;AAD6B,WAA9B,CADvB;AAIE,UAAA,OAAO,EAAEG,SAJX;AAAA,oBAMGH,SAAS,GAAG,MAAH,GAAY;AANxB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAPF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAmBE;AAAA,6BACE,QAAC,SAAD;AACE,QAAA,UAAU,EAAEL,UADd;AAEE,QAAA,QAAQ,EAAEE,YAFZ;AAGE,QAAA,GAAG,EAAEJ,GAHP;AAIE,QAAA,GAAG,EAAED;AAJP;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAnBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA8BD,CA/DD;;GAAML,Y;;KAAAA,Y;AAiEN,eAAeA,YAAf","sourcesContent":["import React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { buildRandomList } from \"../../logic/utils\";\n\nimport Styles from \"./SortingAlgos.module.css\";\nimport { AlgoType, getAlgo } from \"../../logic/algorithms\";\nimport { Algorithm } from \"../Algorithm\";\nimport { AlgoTypeSelector } from \"./AlgoTypeSelector\";\nimport classNames from \"classnames\";\n\nconst responsiveListSize = () => {\n  // const width = ;\n};\n\nconst SortingAlgos: React.FC = () => {\n  const [algoType, setAlgoType] = useState<AlgoType>(AlgoType.BUBBLE_SORT);\n  const [initialList] = useState(buildRandomList(150));\n  const [min, max] = [Math.min(...initialList), Math.max(...initialList)];\n  const [renderList, setRenderList] = useState<number[]>(initialList);\n  const [selectedIdxs, setSelectedIdxs] = useState<Set<number>>(new Set());\n  const [isPLaying, setIsPlaying] = useState<boolean>(false);\n  const algo = useMemo(\n    () => getAlgo(algoType, initialList, setRenderList, setSelectedIdxs),\n    [algoType, initialList]\n  );\n\n  const playPause = useCallback(() => {\n    if (isPLaying) {\n      algo.pause();\n      setIsPlaying(false);\n    } else {\n      algo.play(30).then((sorted) => {\n        algo.pause();\n        setIsPlaying(false);\n        setRenderList(sorted);\n      });\n      setIsPlaying(true);\n    }\n  }, [algo, isPLaying]);\n\n  useEffect(() => {\n    return () => {\n      setIsPlaying(false);\n      algo.pause();\n    };\n  }, [algo]);\n\n  return (\n    <section className={Styles.AlgorithmsWrapper}>\n      <div className={Styles.AlgorithmsControls}>\n        <div className={Styles.AlgorithmsControlField}>\n          <AlgoTypeSelector\n            selectedType={algoType}\n            onChange={(t) => setAlgoType(t)}\n          />\n        </div>\n        <div className={Styles.AlgorithmsControlField}>\n          <button\n            className={classNames(Styles.AlgorithmsControlBtn, {\n              [Styles.isPlaying]: isPLaying,\n            })}\n            onClick={playPause}\n          >\n            {isPLaying ? \"Stop\" : \"Start\"}\n          </button>\n        </div>\n      </div>\n      <section>\n        <Algorithm\n          renderList={renderList}\n          selected={selectedIdxs}\n          max={max}\n          min={min}\n        />\n      </section>\n    </section>\n  );\n};\n\nexport default SortingAlgos;\n"]},"metadata":{},"sourceType":"module"}