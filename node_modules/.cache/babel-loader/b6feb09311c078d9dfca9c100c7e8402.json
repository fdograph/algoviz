{"ast":null,"code":"var _jsxFileName = \"/Users/fernandosilva/projects/algoviz/src/components/SortingAlgos/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useLayoutEffect, useMemo, useState } from \"react\";\nimport { buildRandomList } from \"../../logic/utils\";\nimport Styles from \"./SortingAlgos.module.css\";\nimport { AlgoType, getAlgo } from \"../../logic/algorithms\";\nimport { Algorithm } from \"../Algorithm\";\nimport { AlgoTypeSelector } from \"./AlgoTypeSelector\";\nimport classNames from \"classnames\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst resetOnResize = (setList, setRenderList) => {\n  return () => {\n    const list = buildRandomList(Math.ceil(window.innerWidth / 10));\n    setList(list);\n    setRenderList(list);\n  };\n};\n\nconst SortingAlgos = () => {\n  _s();\n\n  const [algoType, setAlgoType] = useState(AlgoType.BUBBLE_SORT);\n  const [initialList, setInitialList] = useState(buildRandomList(Math.ceil(window.innerWidth / 10)));\n  const [min, max] = [Math.min(...initialList), Math.max(...initialList)];\n  const [renderList, setRenderList] = useState(initialList);\n  const [selectedIdxs, setSelectedIdxs] = useState(new Set());\n  const [isPLaying, setIsPlaying] = useState(false);\n  const algo = useMemo(() => getAlgo(algoType, initialList, setRenderList, setSelectedIdxs), [algoType, initialList]);\n  const playPause = useCallback(() => {\n    if (isPLaying) {\n      algo.pause();\n      setIsPlaying(false);\n    } else {\n      algo.play(30).then(sorted => {\n        algo.pause();\n        setIsPlaying(false);\n        setRenderList(sorted);\n      }).catch(() => {\n        console.log(\"CANCELLED\");\n      });\n      setIsPlaying(true);\n    }\n  }, [algo, isPLaying]);\n  useEffect(() => {\n    return () => {\n      setIsPlaying(false);\n      algo.pause();\n    };\n  }, [algo]);\n  useLayoutEffect(() => {\n    const onResize = resetOnResize(setInitialList, setRenderList);\n    window.addEventListener(\"resize\", onResize);\n    return () => {\n      window.removeEventListener(\"resize\", onResize);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: Styles.AlgorithmsWrapper,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: Styles.AlgorithmsControls,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: Styles.AlgorithmsControlField,\n        children: /*#__PURE__*/_jsxDEV(AlgoTypeSelector, {\n          selectedType: algoType,\n          onChange: t => setAlgoType(t)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: Styles.AlgorithmsControlField,\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: classNames(Styles.AlgorithmsControlBtn, {\n            [Styles.isPlaying]: isPLaying\n          }),\n          onClick: playPause,\n          children: isPLaying ? \"Stop\" : \"Start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(Algorithm, {\n        renderList: renderList,\n        selected: selectedIdxs,\n        max: max,\n        min: min\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SortingAlgos, \"JJd+XS409dy7Pts1fOLs7b0s2nA=\");\n\n_c = SortingAlgos;\nexport default SortingAlgos;\n\nvar _c;\n\n$RefreshReg$(_c, \"SortingAlgos\");","map":{"version":3,"sources":["/Users/fernandosilva/projects/algoviz/src/components/SortingAlgos/index.tsx"],"names":["React","useCallback","useEffect","useLayoutEffect","useMemo","useState","buildRandomList","Styles","AlgoType","getAlgo","Algorithm","AlgoTypeSelector","classNames","resetOnResize","setList","setRenderList","list","Math","ceil","window","innerWidth","SortingAlgos","algoType","setAlgoType","BUBBLE_SORT","initialList","setInitialList","min","max","renderList","selectedIdxs","setSelectedIdxs","Set","isPLaying","setIsPlaying","algo","playPause","pause","play","then","sorted","catch","console","log","onResize","addEventListener","removeEventListener","AlgorithmsWrapper","AlgorithmsControls","AlgorithmsControlField","t","AlgorithmsControlBtn","isPlaying"],"mappings":"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","sourcesContent":["import React, {\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport { buildRandomList } from \"../../logic/utils\";\n\nimport Styles from \"./SortingAlgos.module.css\";\nimport { AlgoType, getAlgo } from \"../../logic/algorithms\";\nimport { Algorithm } from \"../Algorithm\";\nimport { AlgoTypeSelector } from \"./AlgoTypeSelector\";\nimport classNames from \"classnames\";\n\nconst resetOnResize = (\n  setList: (l: number[]) => void,\n  setRenderList: (l: number[]) => void\n) => {\n  return () => {\n    const list = buildRandomList(Math.ceil(window.innerWidth / 10));\n    setList(list);\n    setRenderList(list);\n  };\n};\n\nconst SortingAlgos: React.FC = () => {\n  const [algoType, setAlgoType] = useState<AlgoType>(AlgoType.BUBBLE_SORT);\n  const [initialList, setInitialList] = useState(\n    buildRandomList(Math.ceil(window.innerWidth / 10))\n  );\n  const [min, max] = [Math.min(...initialList), Math.max(...initialList)];\n  const [renderList, setRenderList] = useState<number[]>(initialList);\n  const [selectedIdxs, setSelectedIdxs] = useState<Set<number>>(new Set());\n  const [isPLaying, setIsPlaying] = useState<boolean>(false);\n  const algo = useMemo(\n    () => getAlgo(algoType, initialList, setRenderList, setSelectedIdxs),\n    [algoType, initialList]\n  );\n\n  const playPause = useCallback(() => {\n    if (isPLaying) {\n      algo.pause();\n      setIsPlaying(false);\n    } else {\n      algo\n        .play(30)\n        .then((sorted) => {\n          algo.pause();\n          setIsPlaying(false);\n          setRenderList(sorted);\n        })\n        .catch(() => {\n          console.log(\"CANCELLED\");\n        });\n      setIsPlaying(true);\n    }\n  }, [algo, isPLaying]);\n\n  useEffect(() => {\n    return () => {\n      setIsPlaying(false);\n      algo.pause();\n    };\n  }, [algo]);\n\n  useLayoutEffect(() => {\n    const onResize = resetOnResize(setInitialList, setRenderList);\n    window.addEventListener(\"resize\", onResize);\n    return () => {\n      window.removeEventListener(\"resize\", onResize);\n    };\n  }, []);\n\n  return (\n    <section className={Styles.AlgorithmsWrapper}>\n      <div className={Styles.AlgorithmsControls}>\n        <div className={Styles.AlgorithmsControlField}>\n          <AlgoTypeSelector\n            selectedType={algoType}\n            onChange={(t) => setAlgoType(t)}\n          />\n        </div>\n        <div className={Styles.AlgorithmsControlField}>\n          <button\n            className={classNames(Styles.AlgorithmsControlBtn, {\n              [Styles.isPlaying]: isPLaying,\n            })}\n            onClick={playPause}\n          >\n            {isPLaying ? \"Stop\" : \"Start\"}\n          </button>\n        </div>\n      </div>\n      <section>\n        <Algorithm\n          renderList={renderList}\n          selected={selectedIdxs}\n          max={max}\n          min={min}\n        />\n      </section>\n    </section>\n  );\n};\n\nexport default SortingAlgos;\n"]},"metadata":{},"sourceType":"module"}