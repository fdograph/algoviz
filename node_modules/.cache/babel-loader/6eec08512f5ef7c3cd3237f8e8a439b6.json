{"ast":null,"code":"import _asyncToGenerator from\"/Users/fernandosilva/projects/algoviz/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _toConsumableArray from\"/Users/fernandosilva/projects/algoviz/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _regeneratorRuntime from\"/Users/fernandosilva/projects/algoviz/node_modules/@babel/runtime/regenerator/index.js\";import{arrayToMap,checkKillSwitch,enableKillSwitch,onSortStep,resetKillSwitch,splitMap,updateSortedMap}from\"./utils\";export var mergeSortMaps=function mergeSortMaps(left,right){var result=[];var leftValues=_toConsumableArray(left.values());var rightValues=_toConsumableArray(right.values());var lidx=0;var ridx=0;while(lidx<leftValues.length&&ridx<rightValues.length){var levalue=leftValues[lidx];var revalue=rightValues[ridx];if(levalue<revalue){result.push(levalue);lidx++;}else{result.push(revalue);ridx++;}}while(lidx<leftValues.length){var _levalue=leftValues[lidx];result.push(_levalue);lidx++;}while(ridx<rightValues.length){var _revalue=rightValues[ridx];result.push(_revalue);ridx++;}return result;};export var mergeSort=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(list,onSortStep){var parts,left,right,sortedParts,sortedMap;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:checkKillSwitch();_context.next=3;return onSortStep(list);case 3:if(!(list.size<=1)){_context.next=5;break;}return _context.abrupt(\"return\",list);case 5:parts=splitMap(list);_context.next=8;return mergeSort(parts.left,onSortStep);case 8:left=_context.sent;_context.next=11;return onSortStep(left);case 11:_context.next=13;return mergeSort(parts.right,onSortStep);case 13:right=_context.sent;_context.next=16;return onSortStep(right);case 16:sortedParts=mergeSortMaps(left,right);sortedMap=updateSortedMap(list,sortedParts);_context.next=20;return onSortStep(sortedMap);case 20:return _context.abrupt(\"return\",sortedMap);case 21:case\"end\":return _context.stop();}}},_callee);}));return function mergeSort(_x,_x2){return _ref.apply(this,arguments);};}();export var mergeSortAlgoFn=function mergeSortAlgoFn(originalList,setRenderList,setSelectedIdxs){return{play:function(){var _play=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(interval){var sortedMap;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:resetKillSwitch();_context2.next=3;return mergeSort(arrayToMap(originalList),onSortStep(originalList,setRenderList,setSelectedIdxs,interval));case 3:sortedMap=_context2.sent;setSelectedIdxs(new Set());return _context2.abrupt(\"return\",_toConsumableArray(sortedMap.values()));case 6:case\"end\":return _context2.stop();}}},_callee2);}));function play(_x3){return _play.apply(this,arguments);}return play;}(),pause:function pause(){return enableKillSwitch();}};};","map":{"version":3,"sources":["/Users/fernandosilva/projects/algoviz/src/logic/mergeSort.ts"],"names":["arrayToMap","checkKillSwitch","enableKillSwitch","onSortStep","resetKillSwitch","splitMap","updateSortedMap","mergeSortMaps","left","right","result","leftValues","values","rightValues","lidx","ridx","length","levalue","revalue","push","mergeSort","list","size","parts","sortedParts","sortedMap","mergeSortAlgoFn","originalList","setRenderList","setSelectedIdxs","play","interval","Set","pause"],"mappings":"4XAAA,OACEA,UADF,CAEEC,eAFF,CAGEC,gBAHF,CAIEC,UAJF,CAKEC,eALF,CAMEC,QANF,CAOEC,eAPF,KASO,SATP,CAYA,MAAO,IAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAC3BC,IAD2B,CAE3BC,KAF2B,CAGd,CACb,GAAMC,CAAAA,MAAgB,CAAG,EAAzB,CACA,GAAMC,CAAAA,UAAU,oBAAOH,IAAI,CAACI,MAAL,EAAP,CAAhB,CACA,GAAMC,CAAAA,WAAW,oBAAOJ,KAAK,CAACG,MAAN,EAAP,CAAjB,CACA,GAAIE,CAAAA,IAAI,CAAG,CAAX,CACA,GAAIC,CAAAA,IAAI,CAAG,CAAX,CAEA,MAAOD,IAAI,CAAGH,UAAU,CAACK,MAAlB,EAA4BD,IAAI,CAAGF,WAAW,CAACG,MAAtD,CAA8D,CAC5D,GAAMC,CAAAA,OAAO,CAAGN,UAAU,CAACG,IAAD,CAA1B,CACA,GAAMI,CAAAA,OAAO,CAAGL,WAAW,CAACE,IAAD,CAA3B,CAEA,GAAIE,OAAO,CAAGC,OAAd,CAAuB,CACrBR,MAAM,CAACS,IAAP,CAAYF,OAAZ,EACAH,IAAI,GACL,CAHD,IAGO,CACLJ,MAAM,CAACS,IAAP,CAAYD,OAAZ,EACAH,IAAI,GACL,CACF,CAED,MAAOD,IAAI,CAAGH,UAAU,CAACK,MAAzB,CAAiC,CAC/B,GAAMC,CAAAA,QAAO,CAAGN,UAAU,CAACG,IAAD,CAA1B,CACAJ,MAAM,CAACS,IAAP,CAAYF,QAAZ,EACAH,IAAI,GACL,CAED,MAAOC,IAAI,CAAGF,WAAW,CAACG,MAA1B,CAAkC,CAChC,GAAME,CAAAA,QAAO,CAAGL,WAAW,CAACE,IAAD,CAA3B,CACAL,MAAM,CAACS,IAAP,CAAYD,QAAZ,EACAH,IAAI,GACL,CAED,MAAOL,CAAAA,MAAP,CACD,CApCM,CAsCP,MAAO,IAAMU,CAAAA,SAAqB,0FAAG,iBACnCC,IADmC,CAEnClB,UAFmC,6JAInCF,eAAe,GAJoB,sBAM7BE,CAAAA,UAAU,CAACkB,IAAD,CANmB,aAQ/BA,IAAI,CAACC,IAAL,EAAa,CARkB,0DAS1BD,IAT0B,SAY7BE,KAZ6B,CAYrBlB,QAAQ,CAACgB,IAAD,CAZa,uBAahBD,CAAAA,SAAS,CAACG,KAAK,CAACf,IAAP,CAAaL,UAAb,CAbO,QAa7BK,IAb6B,sCAc7BL,CAAAA,UAAU,CAACK,IAAD,CAdmB,gCAgBfY,CAAAA,SAAS,CAACG,KAAK,CAACd,KAAP,CAAcN,UAAd,CAhBM,SAgB7BM,KAhB6B,sCAiB7BN,CAAAA,UAAU,CAACM,KAAD,CAjBmB,SAmB7Be,WAnB6B,CAmBfjB,aAAa,CAACC,IAAD,CAAOC,KAAP,CAnBE,CAoB7BgB,SApB6B,CAoBjBnB,eAAe,CAACe,IAAD,CAAOG,WAAP,CApBE,wBAqB7BrB,CAAAA,UAAU,CAACsB,SAAD,CArBmB,yCAuB5BA,SAvB4B,yDAAH,kBAArBL,CAAAA,SAAqB,gDAA3B,CA0BP,MAAO,IAAMM,CAAAA,eAA6B,CAAG,QAAhCA,CAAAA,eAAgC,CAC3CC,YAD2C,CAE3CC,aAF2C,CAG3CC,eAH2C,QAIvC,CACJC,IAAI,8EAAE,kBAAOC,QAAP,oIACJ3B,eAAe,GADX,uBAGoBgB,CAAAA,SAAS,CAC/BpB,UAAU,CAAC2B,YAAD,CADqB,CAE/BxB,UAAU,CAACwB,YAAD,CAAeC,aAAf,CAA8BC,eAA9B,CAA+CE,QAA/C,CAFqB,CAH7B,QAGEN,SAHF,gBAQJI,eAAe,CAAC,GAAIG,CAAAA,GAAJ,EAAD,CAAf,CARI,oDAUOP,SAAS,CAACb,MAAV,EAVP,2DAAF,yEADA,CAaJqB,KAAK,CAAE,uBAAM/B,CAAAA,gBAAgB,EAAtB,EAbH,CAJuC,EAAtC","sourcesContent":["import {\n  arrayToMap,\n  checkKillSwitch,\n  enableKillSwitch,\n  onSortStep,\n  resetKillSwitch,\n  splitMap,\n  updateSortedMap,\n  VisualAlgoFn,\n} from \"./utils\";\nimport type { BaseAlgoFn } from \"./utils\";\n\nexport const mergeSortMaps = (\n  left: Map<number, number>,\n  right: Map<number, number>\n): number[] => {\n  const result: number[] = [];\n  const leftValues = [...left.values()];\n  const rightValues = [...right.values()];\n  let lidx = 0;\n  let ridx = 0;\n\n  while (lidx < leftValues.length && ridx < rightValues.length) {\n    const levalue = leftValues[lidx];\n    const revalue = rightValues[ridx];\n\n    if (levalue < revalue) {\n      result.push(levalue);\n      lidx++;\n    } else {\n      result.push(revalue);\n      ridx++;\n    }\n  }\n\n  while (lidx < leftValues.length) {\n    const levalue = leftValues[lidx];\n    result.push(levalue);\n    lidx++;\n  }\n\n  while (ridx < rightValues.length) {\n    const revalue = rightValues[ridx];\n    result.push(revalue);\n    ridx++;\n  }\n\n  return result;\n};\n\nexport const mergeSort: BaseAlgoFn = async (\n  list: Map<number, number>,\n  onSortStep: (list: Map<number, number>) => Promise<void>\n): Promise<Map<number, number>> => {\n  checkKillSwitch();\n\n  await onSortStep(list);\n\n  if (list.size <= 1) {\n    return list;\n  }\n\n  const parts = splitMap(list);\n  const left = await mergeSort(parts.left, onSortStep);\n  await onSortStep(left);\n\n  const right = await mergeSort(parts.right, onSortStep);\n  await onSortStep(right);\n\n  const sortedParts = mergeSortMaps(left, right);\n  const sortedMap = updateSortedMap(list, sortedParts);\n  await onSortStep(sortedMap);\n\n  return sortedMap;\n};\n\nexport const mergeSortAlgoFn: VisualAlgoFn = (\n  originalList: number[],\n  setRenderList: (l: number[]) => void,\n  setSelectedIdxs: (idxs: Set<number>) => void\n) => ({\n  play: async (interval: number) => {\n    resetKillSwitch();\n\n    const sortedMap = await mergeSort(\n      arrayToMap(originalList),\n      onSortStep(originalList, setRenderList, setSelectedIdxs, interval)\n    );\n\n    setSelectedIdxs(new Set<number>());\n\n    return [...sortedMap.values()];\n  },\n  pause: () => enableKillSwitch(),\n});\n"]},"metadata":{},"sourceType":"module"}