{"ast":null,"code":"import _createForOfIteratorHelper from\"/Users/fernandosilva/projects/algoviz/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";import _slicedToArray from\"/Users/fernandosilva/projects/algoviz/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _toConsumableArray from\"/Users/fernandosilva/projects/algoviz/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _asyncToGenerator from\"/Users/fernandosilva/projects/algoviz/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _regeneratorRuntime from\"/Users/fernandosilva/projects/algoviz/node_modules/@babel/runtime/regenerator/index.js\";export var delay=function delay(t){return new Promise(function(r){return setTimeout(r,t);});};export var delayMethod=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(method,t){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return method();case 2:_context.next=4;return delay(t);case 4:case\"end\":return _context.stop();}}},_callee);}));return function delayMethod(_x,_x2){return _ref.apply(this,arguments);};}();export var updateAt=function updateAt(source,idx,val){var updated=_toConsumableArray(source);updated.splice(idx,1,val);return updated;};export var swap=function swap(base,target,source){var result=_toConsumableArray(source);var _ref2=[result[target],result[base]];result[base]=_ref2[0];result[target]=_ref2[1];return result;};export var arrayToMap=function arrayToMap(list){return new Map(list.map(function(v,idx){return[idx,v];}));};export var splitMap=function splitMap(map){var half=Math.ceil(map.size/2);var entries=_toConsumableArray(map.entries());var parts={left:new Map(),right:new Map()};entries.forEach(function(_ref3,entryIdx){var _ref4=_slicedToArray(_ref3,2),idx=_ref4[0],val=_ref4[1];if(entryIdx<half){parts.left.set(idx,val);}else{parts.right.set(idx,val);}});return parts;};export var updateSortedMap=function updateSortedMap(map,sorted){var entries=_toConsumableArray(map.entries());var sortedMap=new Map();entries.forEach(function(_ref5,eIdx){var _ref6=_slicedToArray(_ref5,2),oIdx=_ref6[0],eVal=_ref6[1];sortedMap.set(oIdx,sorted[eIdx]);});return sortedMap;};export var buildRandomList=function buildRandomList(size){return _toConsumableArray(new Array(size)).map(function(n,idx){return idx+1;}).sort(function(){return Math.random()>0.5?1:-1;});};export var graduallyInsertEntries=/*#__PURE__*/function(){var _ref7=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(map,list,setRenderList,setSelectedIdxs,interval){var resultList,_iterator,_step,_step$value,idx,val,updatedList;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:resultList=_toConsumableArray(list);_iterator=_createForOfIteratorHelper(map.entries());_context2.prev=2;_iterator.s();case 4:if((_step=_iterator.n()).done){_context2.next=14;break;}_step$value=_slicedToArray(_step.value,2),idx=_step$value[0],val=_step$value[1];updatedList=updateAt(resultList,idx,val);setSelectedIdxs(new Set([idx]));setRenderList(updatedList);resultList=updatedList;_context2.next=12;return delay(interval);case 12:_context2.next=4;break;case 14:_context2.next=19;break;case 16:_context2.prev=16;_context2.t0=_context2[\"catch\"](2);_iterator.e(_context2.t0);case 19:_context2.prev=19;_iterator.f();return _context2.finish(19);case 22:return _context2.abrupt(\"return\",resultList);case 23:case\"end\":return _context2.stop();}}},_callee2,null,[[2,16,19,22]]);}));return function graduallyInsertEntries(_x3,_x4,_x5,_x6,_x7){return _ref7.apply(this,arguments);};}();export var insertEntries=function insertEntries(map,list){var resultList=_toConsumableArray(list);var _iterator2=_createForOfIteratorHelper(map.entries()),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var _step2$value=_slicedToArray(_step2.value,2),idx=_step2$value[0],val=_step2$value[1];resultList=updateAt(resultList,idx,val);}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}return resultList;};export var listsAreEqual=function listsAreEqual(l1,l2){return l1.join(\"\")===l2.join(\"\");};var KILL_SWITCH=false;export var resetKillSwitch=function resetKillSwitch(){KILL_SWITCH=false;};export var enableKillSwitch=function enableKillSwitch(){KILL_SWITCH=true;};export var checkKillSwitch=function checkKillSwitch(){if(KILL_SWITCH){throw new Error(\"Algorithm was paused or killed\");}};export var onSortStep=function onSortStep(originalList,setRenderList,setSelectedIdxs,interval){return/*#__PURE__*/function(){var _ref8=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(list){var newList;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return delayMethod(function(){setSelectedIdxs(new Set(_toConsumableArray(list.keys())));},interval);case 2:newList=insertEntries(list,originalList);if(listsAreEqual(newList,originalList)){_context3.next=7;break;}_context3.next=6;return graduallyInsertEntries(list,originalList,setRenderList,setSelectedIdxs,interval);case 6:originalList=_context3.sent;case 7:case\"end\":return _context3.stop();}}},_callee3);}));return function(_x8){return _ref8.apply(this,arguments);};}();};","map":{"version":3,"sources":["/Users/fernandosilva/projects/algoviz/src/logic/utils.ts"],"names":["delay","t","Promise","r","setTimeout","delayMethod","method","updateAt","source","idx","val","updated","splice","swap","base","target","result","arrayToMap","list","Map","map","v","splitMap","half","Math","ceil","size","entries","parts","left","right","forEach","entryIdx","set","updateSortedMap","sorted","sortedMap","eIdx","oIdx","eVal","buildRandomList","Array","n","sort","random","graduallyInsertEntries","setRenderList","setSelectedIdxs","interval","resultList","updatedList","Set","insertEntries","listsAreEqual","l1","l2","join","KILL_SWITCH","resetKillSwitch","enableKillSwitch","checkKillSwitch","Error","onSortStep","originalList","keys","newList"],"mappings":"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","sourcesContent":["import { VisualAlgoControl } from \"./algorithms\";\n\nexport type BaseAlgoFn = (\n  list: Map<number, number>,\n  onSortStep: (list: Map<number, number>) => Promise<void>\n) => Promise<Map<number, number>>;\n\nexport type VisualAlgoFn = (\n  originalList: number[],\n  setRenderList: (l: number[]) => void,\n  setSelectedIdxs: (idxs: Set<number>) => void\n) => VisualAlgoControl;\n\nexport const delay = (t: number) => new Promise((r) => setTimeout(r, t));\n\nexport const delayMethod = async (\n  method: () => Promise<void> | void,\n  t: number\n) => {\n  await method();\n  await delay(t);\n};\n\nexport const updateAt = (\n  source: Readonly<number[]>,\n  idx: number,\n  val: number\n) => {\n  const updated = [...source];\n  updated.splice(idx, 1, val);\n\n  return updated;\n};\n\nexport const swap = (base: number, target: number, source: number[]) => {\n  const result = [...source];\n\n  [result[base], result[target]] = [result[target], result[base]];\n\n  return result;\n};\n\nexport const arrayToMap = (list: number[]): Map<number, number> =>\n  new Map(list.map((v, idx) => [idx, v]));\n\nexport const splitMap = (map: Map<number, number>) => {\n  const half = Math.ceil(map.size / 2);\n  const entries = [...map.entries()];\n  const parts = {\n    left: new Map<number, number>(),\n    right: new Map<number, number>(),\n  };\n\n  entries.forEach(([idx, val], entryIdx) => {\n    if (entryIdx < half) {\n      parts.left.set(idx, val);\n    } else {\n      parts.right.set(idx, val);\n    }\n  });\n\n  return parts;\n};\n\nexport const updateSortedMap = (map: Map<number, number>, sorted: number[]) => {\n  const entries = [...map.entries()];\n  const sortedMap = new Map<number, number>();\n\n  entries.forEach(([oIdx, eVal], eIdx) => {\n    sortedMap.set(oIdx, sorted[eIdx]);\n  });\n\n  return sortedMap;\n};\n\nexport const buildRandomList = (size: number) => {\n  return [...new Array(size)]\n    .map((n, idx) => idx + 1)\n    .sort(() => (Math.random() > 0.5 ? 1 : -1));\n};\n\nexport const graduallyInsertEntries = async (\n  map: Map<number, number>,\n  list: number[],\n  setRenderList: (l: number[]) => void,\n  setSelectedIdxs: (idxs: Set<number>) => void,\n  interval: number\n) => {\n  let resultList = [...list];\n\n  for (const [idx, val] of map.entries()) {\n    const updatedList = updateAt(resultList, idx, val);\n    setSelectedIdxs(new Set<number>([idx]));\n    setRenderList(updatedList);\n    resultList = updatedList;\n\n    await delay(interval);\n  }\n\n  return resultList;\n};\n\nexport const insertEntries = (map: Map<number, number>, list: number[]) => {\n  let resultList = [...list];\n\n  for (const [idx, val] of map.entries()) {\n    resultList = updateAt(resultList, idx, val);\n  }\n\n  return resultList;\n};\n\nexport const listsAreEqual = (l1: number[], l2: number[]): boolean => {\n  return l1.join(\"\") === l2.join(\"\");\n};\n\nlet KILL_SWITCH = false;\nexport const resetKillSwitch = () => {\n  KILL_SWITCH = false;\n};\n\nexport const enableKillSwitch = () => {\n  KILL_SWITCH = true;\n};\n\nexport const checkKillSwitch = () => {\n  if (KILL_SWITCH) {\n    throw new Error(\"Algorithm was paused or killed\");\n  }\n};\n\nexport type StepFn = (list: Map<number, number>) => Promise<void>;\nexport const onSortStep = (\n  originalList: number[],\n  setRenderList: (l: number[]) => void,\n  setSelectedIdxs: (idxs: Set<number>) => void,\n  interval: number\n): StepFn => {\n  return async (list: Map<number, number>) => {\n    await delayMethod(() => {\n      setSelectedIdxs(new Set<number>([...list.keys()]));\n    }, interval);\n\n    const newList = insertEntries(list, originalList);\n\n    if (!listsAreEqual(newList, originalList)) {\n      originalList = await graduallyInsertEntries(\n        list,\n        originalList,\n        setRenderList,\n        setSelectedIdxs,\n        interval\n      );\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}