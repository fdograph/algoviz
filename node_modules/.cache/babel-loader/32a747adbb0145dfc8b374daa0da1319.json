{"ast":null,"code":"import _toConsumableArray from\"/Users/fernandosilva/projects/algoviz/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _asyncToGenerator from\"/Users/fernandosilva/projects/algoviz/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _regeneratorRuntime from\"/Users/fernandosilva/projects/algoviz/node_modules/@babel/runtime/regenerator/index.js\";import{arrayToMap,checkKillSwitch,enableKillSwitch,onSortStep,resetKillSwitch,swap}from\"./utils\";export var bubbleSort=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(map,onSortStep){var list,size,i,j,targetMap;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:list=_toConsumableArray(map.values());size=list.length;i=0;case 3:if(!(i<size-1)){_context.next=20;break;}j=0;case 5:if(!(j<size-i-1)){_context.next=17;break;}checkKillSwitch();if(!(list[j]>list[j+1])){_context.next=14;break;}list=swap(j,j+1,list);targetMap=new Map();targetMap.set(j,list[j]);targetMap.set(j+1,list[j+1]);_context.next=14;return onSortStep(targetMap);case 14:j++;_context.next=5;break;case 17:i++;_context.next=3;break;case 20:return _context.abrupt(\"return\",arrayToMap(list));case 21:case\"end\":return _context.stop();}}},_callee);}));return function bubbleSort(_x,_x2){return _ref.apply(this,arguments);};}();export var bubbleSortAlgoFn=function bubbleSortAlgoFn(originalList,setRenderList,setSelectedIdxs){return{play:function(){var _play=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(interval){var sortedMap;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:resetKillSwitch();_context2.next=3;return bubbleSort(arrayToMap(originalList),onSortStep(originalList,setRenderList,setSelectedIdxs,interval));case 3:sortedMap=_context2.sent;setSelectedIdxs(new Set());return _context2.abrupt(\"return\",_toConsumableArray(sortedMap.values()));case 6:case\"end\":return _context2.stop();}}},_callee2);}));function play(_x3){return _play.apply(this,arguments);}return play;}(),pause:function pause(){return enableKillSwitch();}};};","map":{"version":3,"sources":["/Users/fernandosilva/projects/algoviz/src/logic/bubbleSort.ts"],"names":["arrayToMap","checkKillSwitch","enableKillSwitch","onSortStep","resetKillSwitch","swap","bubbleSort","map","list","values","size","length","i","j","targetMap","Map","set","bubbleSortAlgoFn","originalList","setRenderList","setSelectedIdxs","play","interval","sortedMap","Set","pause"],"mappings":"4XAAA,OACEA,UADF,CAGEC,eAHF,CAIEC,gBAJF,CAKEC,UALF,CAMEC,eANF,CAOEC,IAPF,KASO,SATP,CAWA,MAAO,IAAMC,CAAAA,UAAsB,0FAAG,iBACpCC,GADoC,CAEpCJ,UAFoC,8IAIhCK,IAJgC,oBAIrBD,GAAG,CAACE,MAAJ,EAJqB,EAK9BC,IAL8B,CAKvBF,IAAI,CAACG,MALkB,CAO3BC,CAP2B,CAOvB,CAPuB,aAOpBA,CAAC,CAAGF,IAAI,CAAG,CAPS,2BAQzBG,CARyB,CAQrB,CARqB,aAQlBA,CAAC,CAAGH,IAAI,CAAGE,CAAP,CAAW,CARG,2BAShCX,eAAe,GATiB,KAW5BO,IAAI,CAACK,CAAD,CAAJ,CAAUL,IAAI,CAACK,CAAC,CAAG,CAAL,CAXc,2BAY9BL,IAAI,CAAGH,IAAI,CAACQ,CAAD,CAAIA,CAAC,CAAG,CAAR,CAAWL,IAAX,CAAX,CAEMM,SAdwB,CAcZ,GAAIC,CAAAA,GAAJ,EAdY,CAe9BD,SAAS,CAACE,GAAV,CAAcH,CAAd,CAAiBL,IAAI,CAACK,CAAD,CAArB,EACAC,SAAS,CAACE,GAAV,CAAcH,CAAC,CAAG,CAAlB,CAAqBL,IAAI,CAACK,CAAC,CAAG,CAAL,CAAzB,EAhB8B,uBAkBxBV,CAAAA,UAAU,CAACW,SAAD,CAlBc,SAQAD,CAAC,EARD,+BAOND,CAAC,EAPK,+DAuB7BZ,UAAU,CAACQ,IAAD,CAvBmB,yDAAH,kBAAtBF,CAAAA,UAAsB,gDAA5B,CA0BP,MAAO,IAAMW,CAAAA,gBAA8B,CAAG,QAAjCA,CAAAA,gBAAiC,CAC5CC,YAD4C,CAE5CC,aAF4C,CAG5CC,eAH4C,QAIxC,CACJC,IAAI,8EAAE,kBAAOC,QAAP,oIACJlB,eAAe,GADX,uBAGoBE,CAAAA,UAAU,CAChCN,UAAU,CAACkB,YAAD,CADsB,CAEhCf,UAAU,CAACe,YAAD,CAAeC,aAAf,CAA8BC,eAA9B,CAA+CE,QAA/C,CAFsB,CAH9B,QAGEC,SAHF,gBAQJH,eAAe,CAAC,GAAII,CAAAA,GAAJ,EAAD,CAAf,CARI,oDAUOD,SAAS,CAACd,MAAV,EAVP,2DAAF,yEADA,CAaJgB,KAAK,CAAE,uBAAMvB,CAAAA,gBAAgB,EAAtB,EAbH,CAJwC,EAAvC","sourcesContent":["import {\n  arrayToMap,\n  BaseAlgoFn,\n  checkKillSwitch,\n  enableKillSwitch,\n  onSortStep,\n  resetKillSwitch,\n  swap,\n  VisualAlgoFn,\n} from \"./utils\";\n\nexport const bubbleSort: BaseAlgoFn = async (\n  map: Map<number, number>,\n  onSortStep: (list: Map<number, number>) => Promise<void>\n) => {\n  let list = [...map.values()];\n  const size = list.length;\n\n  for (let i = 0; i < size - 1; i++) {\n    for (let j = 0; j < size - i - 1; j++) {\n      checkKillSwitch();\n\n      if (list[j] > list[j + 1]) {\n        list = swap(j, j + 1, list);\n\n        const targetMap = new Map<number, number>();\n        targetMap.set(j, list[j]);\n        targetMap.set(j + 1, list[j + 1]);\n\n        await onSortStep(targetMap);\n      }\n    }\n  }\n\n  return arrayToMap(list);\n};\n\nexport const bubbleSortAlgoFn: VisualAlgoFn = (\n  originalList: number[],\n  setRenderList: (l: number[]) => void,\n  setSelectedIdxs: (idxs: Set<number>) => void\n) => ({\n  play: async (interval: number) => {\n    resetKillSwitch();\n\n    const sortedMap = await bubbleSort(\n      arrayToMap(originalList),\n      onSortStep(originalList, setRenderList, setSelectedIdxs, interval)\n    );\n\n    setSelectedIdxs(new Set<number>());\n\n    return [...sortedMap.values()];\n  },\n  pause: () => enableKillSwitch(),\n});\n"]},"metadata":{},"sourceType":"module"}